- Class: meta
  Course: beginR
  Lesson: Fonctions
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

- Class: text
  Output: "Je vous rappelle que la commande info() vous permettra d'obtenir les quelques commandes de manipulation de swirl, notamment pour pauser (play()), reprendre (nxt()), quitter+sauvegarder (bye()), etc."

# Q1
- Class: text
  Output: "Les fonctions font partie des éléments essentiels en programmation, y compris avec R. Elles permettent de définir de petits blocks de code ré-utilisable pouvant être exploités comme tout autre élément."

# Q2
- Class: text
  Output: "Si vous avez effectué toutes les parties précédentes de ce module, il vous est déjà arrivé d'utiliser des fonctions, sans forcément très bien comprendre ce qu'elles étaient. Une fonction se caractérise par un nom suivi de parenthèses."

# Q3
- Class: cmd_question
  Output: "Essayons d'utiliser quelques fonctions basiques pour se faire la main. La fonction Sys.Date() retourne une chaine de caractères montrant la date du jour. Essayez cette commande pour la voir en action."
  CorrectAnswer: Sys.Date()
  AnswerTests: omnitest(correctExpr='Sys.Date()')
  Hint: "Affichez la date du jour en tapant: Sys.Date()"

# Q4
- Class: text
  Output: "La plupart des fonctions de R retourne une valeur. Les fonctions comme Sys.Date() retournent une valeur qui dépend de l'environnement d'exploitation de votre ordinateur (Windows, Mac, Linux, versions, etc) tandis que d'autres fonctions manipulent des données afin d'effectuer des calculs ou des opérations et retournent une valeur (numérique, booléenne, vecteur, etc)."

# Q5
- Class: cmd_question
  Output: "La fonction mean() prend un vecteur en entrée et retourne la moyenne de tous les nombres présents dans le vecteur d'entrée. Les variables d'entrée d'une fonction sont généralement appelées des arguments. Pour fournir des arguments à une fonction (on dit également 'passer des arguments'), on les indique dans la parenthèse de la fonction. Essayez de passer l'argument c(2, 4, 5) à la fonction mean()."
  CorrectAnswer: mean(c(2, 4, 5))
  AnswerTests: omnitest(correctExpr='mean(c(2, 4, 5))')
  Hint: "Calculez la moyenne de 2, 4, and 5 en tapant: mean(c(2, 4, 5)). Ici il faut que vous entriez les valeurs exactement dans cet ordre (afin de faciliter la vérification de votre réponse par le logiciel) mais ce n'est normalement pas nécessaire avec la fonction mean."

# Q6
- Class: text
  Output: "Les arguments passés à la fonction sont généralement des variables nécessaires aux opérations qu'effectuent la fonction. Comme vu dans l'exemple précédent, la fonction mean() prend un vecteur en argument : mean(c(2,6,8)). La fonction moyenne additionne ensuite tous les nombres de ce vecteur et divise cette somme par la taille du vecteur."

# Q7
- Class: text
  Output: "Dans les questions à venir, il vous sera demandé de modifier un script qui apparaitra dès que vous aurez passé cette question. Lorsque vous avez fini de modifier le script, sauvegardez vos changements (Ctrl+S) et tapez submit() pour lancer l'évaluation du script. Le script qui va s'afficher contient des commentaires (un commentaire sert à 'mettre de côté' la/les lignes, c'est-à-dire demander à R à ne pas interpréter ce code/texte et est défini en mettant un croisillon/dièse (mais c'est un usage erroné)/hash en anglais) en début de lignes '#'). Assurez-vous de bien les lire, ils contiennent des informations pour vous aider à compléter l'exercice !"

# Q8
- Class: text
  Output: "Dans tous les cas, lors de l'appel à une fonction, nous obtiendrons une valeur en réponse. Cette valeur est définie au sein de la fonction par deux mécanismes: -- soit elle est définie explicitement via la commande 'return(valeur à retourner)' -- soit elle est définie implicitement par la dernière variable évaluée dans la fonction (comportement propre à R et non généralisé aux autres langages)."

# Q9
- Class: script
  Output: "Nous voulons écrire une fonction qui ne prendra qu'un argument, appelé x, et retournera cette variable x sans la modifier. Supprimez le dièse. Assurez-vous de sauvegarder vos changements au script avant de taper submit()."
  AnswerTests: test_func1()
  Hint: "Assurez-vous de supprimer le symbole dièse (#) pour que la dernière expression de la fonction soit juste x."
  Script: boring_function.R

# Q10
- Class: cmd_question
  Output: "Maintenant que vous avez créé (disons plutôt édité) votre première fonction, testons-la ! Tapez: boring_function('Hello World !'). Si tout fonctionne correctement, la fonction devrait tout simplement vous retourner la chaine de caractères fournie en argument : 'Hello World !.'"
  CorrectAnswer: "boring_function('Hello World !')"
  AnswerTests: omnitest(correctExpr="boring_function('Hello World !')")
  Hint: "Testez votre fonction en tapant: boring_function('Hello World !')"

# Q11
- Class: text
  Output: "Félicitations pour votre première fonction! Que s'est-il passé? en appelant la fonction boring_function avec la commande 'boring_function('Hello World !')', R a en réalité compris la commande suivante: boring_function(x='Hello World !'). "
# Maintenant un peu d'imagination. Admettons que nous ayant une fonction qui calcule une addition de deux chiffres, il faut donc deux arguments à notre fonction."

#- Class: script
#  Output: "Créons cette fonction dans notre prochain script. Vous y verrez notamment deux lignes pré-fournies utilisant la fonction message qui permet d'afficher des message dans la console (nous verrons d'autres façon de faire cela ultérieurement, ne nous en préoccupez pas pour le moment). Ces deux lignes permettent notamment d'afficher la valeur attribuée à x et celle attribuée à y. Assurez-vous de sauvegarder vos changements au script avant de taper submit()."
#  AnswerTests: test_func_j()
#  Hint: "Additionnez simplement le premier argument et le deuxième argument."
#  Script: even_more_boring_function.R


# Q10
#- Class: cmd_question
#  Output: "Testons notre fonction en tapant : even_more_borign_function(2, 3)."
#  CorrectAnswer: "boring_function(2, 3)"
#  AnswerTests: omnitest(correctExpr="boring_function(1, 3)")
#  Hint: "Testez votre fonction en tapant: even_more_boring_function(2, 3)"

# Q11
#- Class: text
#  Output: "Que s'est-il passé ici? la variable x étant le premier argument défini pour notre fonction, il a pris la valeur du premier argument fournit lors de l'appel de la fonction (ici, 2) tandis que la variable y, deuxième argument défini pour notre function, a pris la valeur du deuxième argument défini lors de l'appel de la fonction (ici, 3). "


# Q12
#- Class: cmd_question
#  Output: "Cela nous permet de constater que les arguments indiqué dans l'appel de la fonction doivent suivre l'ordre des arguments indiqué lors de la déclaration fonction. Ainsi, la commande 'even_more_boring_function(3, 2)' impliquerait que x=3 et y=2. Vérifiez cela en tapant cette commande."
#  CorrectAnswer: even_more_boring_function(3, 2)
#  AnswerTests: omnitest(correctExpr='even_more_boring_function(3, 2)')
#  Hint: "Tapez: even_more_boring_function(3, 2)  pour voir les effets."

# Q11
#- Class: cmd_question
#  Output: "Il n'existe qu'une seule façon de ne pas respecter cet ordre, il faut pour cela effectuer un nommage explicite. Cela consiste à explicitement déclarer les arguments et les valeurs que l'on veut leurs donner lors de l'appel de la fonction. Ainsi, on pourrait écrire 'even_more_boring_function(y=3, x=2)'. Essayez cela."
#  CorrectAnswer: even_more_boring_function(y=3, x=2)
#  AnswerTests: omnitest(correctExpr='even_more_boring_function(y=3, x=2)')
#  Hint: "Tapez: even_more_boring_function(y=3, x=2) pour voir les effets."

# Q12
- Class: text
  Output: "En écrivant des fonctions, vous pouvez sérieusement améliorer votre compréhension du fonctionnement de R. Comme l'a un jour dit John Chambers, le créatoeur de R: Il y a deux choses utiles à savoir pour bien comprendre comment fonctionnent les calculs dans R: 1. Tout ce qui existe dans R est un objet. 2. Tout ce qui se produit dans R est lié à un appel de fonction."


# Q13
- Class: cmd_question
  Output: "Si vous voulez voir le code source de n'importe quelle fonction, tapez simplement le nom de la fonction sans parenthèses ni argument. Essayons cela avec la fonction que vous venez d'éditer. Tapez 'boring_function' pour voir son code source."
  CorrectAnswer: boring_function
  AnswerTests: omnitest(correctExpr='boring_function')
  Hint: "Pour voir le code source d'une fonction il suffit de taper son nom. Tapez: boring_function pour le constater."

# Q14
- Class: text
  Output: "Bon, tout ça c'est bien mais il est temps de faire une fonction un peu plus utile que ça. Nous allons répliquer la fonction mean() en créant une fonction my_mean(). Rappelez-vous, elle calcule la moyenne des nombres d'un vecteur en calculant la somme de ces nombres et en divisant cette somme par la taille du vecteur (nombre d'élements dans le vecteur)."

# Q15
- Class: script
  Output: Assurez-vous de sauvegarder le script avant de taper submit().
  AnswerTests: test_func2()
  Hint: "Utilisez la fonction sum() pour trouver la somme des nombres d'un vecteur. Utilisez length() pour trouver la taille de ce vecteur."
  Script: my_mean.R

# Q16
- Class: cmd_question
  Output: "Maintenant testez votre fonction my_mean() pour trouver la moyenne du vecteur c(4, 5, 10)."
  CorrectAnswer: my_mean(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='my_mean(c(4, 5, 10))')
  Hint: "Executez my_mean(c(4, 5, 10)) pour tester votre nouvelle fonction."

# Q17
- Class: text
  Output: "Maintenant, essayons d'écrire une fonction avec des arguments par défaut. Un argument par défaut est une valeur fournie à la fonction si aucun argument ne vient remplacer cette valeur par défaut. On peut définir cette ou ces valeur-s lorsque l'on définit/crée/écrit la fonction en ajoutant '= valeur' à la variable pour laquelle on veut définir une valeur par défaut. C'est très utile pour paramétrer des fonctions avec des variables qui ne changeront que rarement."

# Q18
- Class: script
  Output: "Assurez-vous de sauvegarder le script avant de taper submit()."
  AnswerTests: test_func3()
  Hint: "Rappelez-vous de correctement définir la valeur par défaut !"
  Script: remainder.R

# Q19
- Class: cmd_question
  Output: "Faisons quelques tests avec cette fonction remainder qui calcule le reste d'une division entière. Exécutez la commande remainder(5) et constatez ce qu'il se passe."
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: "Testez votre fonction remainder avec la commande: remainder(5)"

# Q20
- Class: text
  Output: "Prenons quelques instant pour examiner ce qu'il s'est passé. Vous avez passé un argument à la fonction, et R a fait coïncider cet argument à la variable 'num' puisque 'num' est le premier argument. L'argument 'divisor' n'ayant pas été fourni, R a utiisé la valeur par défaut qui avait été indiquée lors de la définition de la fonction, soit 2."

# Q21
- Class: cmd_question
  Output: "Maintenant, testons notre fonction remainder en apportant deux arguments cette fois-ci. Tapez: remainder(11, 5) et observons ce qu'il se produit."
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: "Testons notre fonction en tapant: remainder(11, 5)"

# Q22
- Class: text
  Output: "Une fois encore, les arguments ont été modifiés en accord avec ce qu'on a fourni à l'appel de la fonction."

# Q23
- Class: cmd_question
  Output: "Vous pouvez également expliciter les arguments d'une fonction lors de l'appel de fonction. En désignant explicitement les arguments, vous pouvez vous permettre de ne pas respecter l'ordre (R utilisera les noms des variables plutôt que l'ordre des arguments pour faire la concordance) mais il est de bon usage d'essayer de le respecter lorsque c'est possible. Vous pouvez essayer cela en tapant: remainder(divisor = 11, num = 5)."
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: "L'ordre n'a plus d'importance lorsque l'on nomme explicitement les arguments et les valeurs que l'on veut leur attribuer. Testez cela en tapant: remainder(divisor = 11, num = 5)"

# Q24
- Class: text
  Output: "Comme vous pouvez le voir, il y a une nette différence entre remainder(11, 5) et remainder(divisor = 11, num = 5)."

# Q25
- Class: cmd_question
  Output: "R peut aussi partiellement faire la concordance. Essayez de taper remainder(4, div = 2) pour constater cela."
  CorrectAnswer: remainder(4, div = 2)
  AnswerTests: omnitest(correctExpr='remainder(4, div = 2)')
  Hint: "Testez la concordance partielle en tapant la commande: remainder(4, div = 2)"

# Q26
- Class: text
  Output: "Un point de vigilance: en général on essaie d'écrire un code aussi clair et compréhensible que possible. Evitez de changer de 'convention' d'écriture en passant alternativement entre le nommage explicite et arguments ordonnés."

# Q27
- Class: cmd_question
  Output: "Avec toutes ces informations à propos des arguments, vous pouvez vous demander s'il y a une fonction permettant de connaitre les arguments d'une fonction (sans passer par la documentation). Fort heureusement, vous pouvez utiliser la fonction args() pour connaitre les arguments d'une fonction ! Tapez: args(remainder) pour examiner les arguments de la fonction remainder."
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: "Inspectez les arguments de la fonction remainder en tapant: args(remainder)"

# Q
- Class: text
  Output: "Vous ne vous en êtes probablement pas rendu compte mais je viens de vous attirer dans un piège fort intéressant ! args() est une fonction, remainder() est une fonction, et pourtant, on a passé remainder en tant qu'argument à la fonction args(). Oui, c'est bien cela, on peut passer des fonctions en arguments ! (Rappelez-vous, avec R, tout est objet !) C'est un concept très pratique ! Ecrivons un script pour voir un peu mieux comment cela fonctionne."

# Q
- Class: script
  Output: Assurez-vous de sauvegarder votre script avant de lancer la commande submit().
  AnswerTests: test_func4()
  Hint: "Faites attention, lorsque vous passez une fonction en argument, à ne pas mettre les parenthèses, mais mettre uniquement le nom de la fonction !"
  Script: evaluate.R

# Q
- Class: cmd_question
  Output: "Amusons-nous un peu avec notre fonction evaluate(). Utilisez la fonction evaluate pour trouver l'écart-type du vecteur suivant: c(1.4, 3.6, 7.9, 8.8). Utilisez la fonction 'sd' pour calculer l'écart-type avec R."
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: "La fonction R pour calculer l'écart-type est sd(). Assurez-vous de ne passer que le nom de la fonction (sans parenthèses ni arguments) et de fournir le vecteur en second argument."

# Q
- Class: text
  Output: "Le principe de passer des fonctions en argument d'autres fonctions est un concept fondamental en programmation."

# Q
- Class: text
  Output: "Vous pouvez être surpris d'apprendre que l'on peut passer une fonction (appelons la A) en argument à une autre fonction (B) sans que la fonction A ne soit définie en premier lieu. Ces fonctions n'existent que dans l'appel de la fonction B. Elles n'ont donc pas de noms qui leur soient propres permettant de les utiliser comme les fonctions usuelles. Elles s'appellent des fonctions anonymes."

# Q
- Class: text
  Output: "Utilisons la fonction evaluate vue un peu plus haut pour explorer comment fonctionnent ces fonctions anonymes. Pour le premier argument de la fonction 'evaluate', nous allons écrire une petite fonction qui tient en une seule ligne. Pour le second argument, nous allons fournir des données qui seront utilisées par la fonction anonyme (fournie en 1er argument)."

# Q
- Class: cmd_question
  Output: "Tapez la commande suivante, nous allons ensuite analyser un  peu ce qu'il s'est passé: evaluate(function(x){x+1}, 6)"
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: "Tapez : evaluate(function(x){x+1}, 6)"

# Q
- Class: text
  Output: "Le premier argument est une petite fonction anonyme qui prend un argument 'x' et retourne 'x+1'.  Nous passons le nombre 6 à cette fonction afin que toute l'expression retourne 7."

# Q
- Class: cmd_question
  Output: "Essayez d'utiliser la fonction evaluate() avec une autre fonction anonyme que vous écrirez afin d'obtenir le premier élément du vecteur c(8, 4, 0). Votre fonction anonmyme ne devrait prendre qu'une variable en argument que vous appellerez 'x'."
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: "Rappelez-vous comment récupérer un élément d'un vecteur par sa position dans le vecteur. Rappelez-vous également qu'une fonction R retourne la dernière variable évaluée. Enfin, je rappelle que votre fontion ne prend qu'un seul argument, appelé 'x'."

# Q
- Class: cmd_question
  Output: "Maintenant, essayez d'utiliser la fonction evaluate() avec une fonction anonyme que retourne le dernier élément d'un vecteur c(8, 4, 0). Comme pour l'exercice précédent, votre fonction anonyme ne prendra qu'un argument, appelé 'x'."
  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: "Rappelez-vous comment récupérer le dernier élément d'un vecteur... un petit coup de main? vous avez besoin de la fonction length ! (et comme précédemment, rappelez-vous qu'une fonction retourne la dernière variable évaluée et que votre fonction anonyme ne prend qu'un argument, que vous appellerez 'x')."

# Q
- Class: cmd_question
  Output: "Pour le reste du cours, nous allons utiliser la fonction paste() à plusieurs reprises. Tapez ?paste pour jeter un oeil à la documentation de cette fonction."
  CorrectAnswer: ?paste
  AnswerTests: omnitest(correctExpr='?paste')
  Hint: "Tapez juste '?paste'"

# Q
- Class: text
  Output: "Comme vous pouvez le voir, le premier argument de la fonction paste() est `...` (appelé ellipse, ou trois-points). L'ellipse permet de passer un nombre d'arguments indéfini à la fonction. Dans le cas de paste(), on peut lui fournir autant de chaines de caractères que l'on veut, la fonction retournera une unqiue chaine de caractères combinant toutes celles passées en argument."

# Q
- Class: cmd_question
  Output: "Juste pour s'amuser et voir la fonction paste() en action, tapez paste('Programming', 'is', 'fun !')"
  CorrectAnswer: paste("Programming", "is", "fun !")
  AnswerTests: omnitest(correctExpr='paste("Programming", "is", "fun !")')
  Hint: 'Tapez simplement: paste("Programming", "is", "fun !")'

# Q
- Class: text
  Output: "Il est temps d'écrire notre propre version modifiée de paste() que nous appellerons telegram."

# Q
- Class: script
  Output: Assurez-vous de sauvegarder votre script avant de taper submit().
  AnswerTests: test_func5()
  Hint: "Rappelez-vous que les arguments peuvent être indiqués par les trois-points."
  Script: telegram.R

# Q
- Class: cmd_question
  Output: "Maintenant testons notre fonction telegram. Utilisez la fonction telegram et passez-lui les arguments que vous voulez!"
  CorrectAnswer: telegram()
  AnswerTests: expr_uses_func('telegram')
  Hint: 'Utilisez la fonction telegram avec les arguments de votre choix.'

# Q
- Class: script
  Output: "Ecrivons une nouvelle fonction mad_libs maintenant. Assurez-vous de sauvegarder votre script avant de taper submit()."
  AnswerTests: test_func6()
  Hint: "Votre fonction devrait avoir trois sections: 1. capturer l'ellipse dans une fonction list(), 2. libérer les arguments de l'ellipse et les assigner à une ou plusieurs variables, 3. passer ces variables à la fonction paste()."
  Script: mad_libs.R

# Q
- Class: cmd_question
  Output: "Testons cette fonction maintenant. Assurez-vous de placer l'emplacement, l'adjectif et le nom dans cet ordre pour que votre fonction fonctionne correctement.."
  CorrectAnswer: mad_libs(adjective = "", place = "", noun = "")
  AnswerTests: expr_uses_func('mad_libs')
  Hint: 'Utilisez la fonction mad_libs avec un emplacement, adjectif et nom (dans cet ordre!).'

# Q
- Class: text
  Output: "Nous arrivons à la fin de ce cours, mais il y a encore une notion  que je dois vous présenter."

# Q
- Class: text
  Output: "Vous êtes familier avec les additions, soustractions, multiplications et divisions de nombres dans R. Pour faire cela, vous utilisez les symboles +, -, * et / . Ces symboles sont appelés des opérateurs binaires car ils prennent deux arguments (un à gauche et un à droite de l'opérateur)."

# Q
- Class: text
  Output: "Dans R, on peut définir ses propres opérateurs binaires. Nous allons voir comment faire cela dans le prochain script."

# Q
- Class: script
  Output: Assurez-vous de sauvegarder votre script avant de taper submit().
  AnswerTests: test_func7()
  Hint: "Rappelez-vous, on utilise un opérateur binaire comme ceci: 'Hello' %p% 'student!'."
  Script: bin_op.R

# Q
- Class: cmd_question
  Output: "Félicitations! Vous venez de définir votre propre opérateur binaire. Testons-le ! Collez ensemble les chaines de caractères suivantes à l'aide de votre nouvel opérateur binaire: 'I', 'love', 'R!'."
  CorrectAnswer: "'I' %p% 'love' %p% 'R!'"
  AnswerTests: omnitest(correctExpr="'I' %p% 'love' %p% 'R!'")
  Hint: 'Utilisez votre opérateur %p% entre chaque chaîne de caractères.'

# Q
- Class: text
  Output: "Nous sommes arrivé au bout de notre cours sur les fonctions ! A vous  maintenant d'improviser et d'écrire de nouvelles fonctions ! Rappelez-vous 'Un grand pouvoir implique de grandes responsabilités, jeune padawan!' -- Dumbledore, Le seigneur des Anneaux."

- Class: text
  Output: "Félicitations, vous avez terminé ce module ! Sur Moodle, selectionnez le test 'Fonctions' et entrez le code 'M4hsup_N0NS3NS' (en conservant les majuscules et sans guillemets !) cela vous ouvrira le test associé à cette leçon."

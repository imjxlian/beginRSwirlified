- Class: meta
  Course: beginR
  Lesson: lapply_sapply
  Author: Joris SANSEN
  Type: Standard
  Organization: bordeaux INP / ENSTBB
  Version: 2.4.5


- Class: text
  Output: "Je vous rappelle que la commande info() vous permettra d'obtenir les quelques commandes de manipulation de swirl, notamment pour pauser (play()), reprendre (nxt()), quitter+sauvegarder(bye()), etc."

- Class: text
  Output: "Dans ce cours, vous allez apprendre à utiliser lapply() et sapply(), les deux membres les plus importants de la famille de fonction *apply de R, aussi connu comme fonctions de boucles."

- Class: text
  Output: "Ces fonctions sont très puissantes, tout comme leurs homologues telles que vapply() et tapply(), et offrent une moyens pratique et concis d'implementer des stratégies du type séparer-appliquer-rassembler couramment utilisé en analyses de données."

- Class: text
  Output: "Toutes les fonctions de la famille *apply opèrent de la façon suivante: 1. séparer (split) les données en éléments plus petits (selon des modalités qui leurs sont propres), 2. appliquer une fonction sur chacun de ces éléments, 3. combiner le résultat. Pour une description plus détaillée de cette strategie, vous pouvez vous réferrer à l'article de Hadley Wickham dans le Journal of Statistical Software paper intitulé 'The Split-Apply-Combine Strategy for Data Analysis'. Vous le trouverez en accès libre ici: https://www.jstatsoft.org/article/view/v040i01 "

- Class: text
  Output: "Tout le long de ce cours, nous allons utiliser le jeu de données 'Flags' fournit sur le dépot UCI Machine Learning. Ce jeu de données représente des informations concernant les pays et leurs drapeaux respectifs et peut être obtenu ici: http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: "Attaquons tout de suite les choses sérieuses pour que vous ayez directement un aperçu de l'intérêt de ces fonctions et de leurs fonctionnement."

- Class: cmd_question
  Output: "J'ai d'ores et déjà stocké ces fonctions dans une variable appelée flags. Tapez head(flags) pour afficher les 6 premières lignes des données."
  CorrectAnswer: head(flags)
  AnswerTests: omnitest(correctExpr='head(flags)')
  Hint: "Tapez head(flags) pour afficher la 'tête' des données, c'est-à-dire les quelques premières lignes."

- Class: cmd_question
  Output: "Vous pourrez avoir besoin de 'scroller' (dérouler) l'affichage pour voir toutes les sorties de vos commandes. Maintenant vérifiez les dimensions du jeu de données en tuilisant la fonction dim()"
  CorrectAnswer: dim(flags)
  AnswerTests: omnitest(correctExpr='dim(flags)')
  Hint: "Tapez dim(flags) pour voir les dimensions du jeu de données."

- Class: text
  Output: "On voit donc que le jeu de données est composé de 194 lignes, aussi appelées observations, et 30 colonnes, appelées variables. A chaque observations correspond un pays et chaque variable représente une caractéristique du pays ou de son drapeau. Pour afficher une description plus complète du jeu de données dans un fichier de texte séparé, tapez viewinfo() dans la console."

- Class: cmd_question
  Output: "Comme avec tout jeu de données, il est important de savori sous quel format les données ont été stockées. En d'autres termes, quelle est la classe de chaque variable? Pour cela, on va tout d'abord utiliser la commande class(flags). A vous."
  CorrectAnswer: class(flags)
  AnswerTests: omnitest(correctExpr='class(flags)')
  Hint: "Tapez class(flags) pour voir ce que cela produit."

- Class: text
  Output: "Cela nous indique juste que tout le jeu de données est stocké sous forme de 'data.frame', ce qui ne répond pas réellement à notre question. En fait, il faut appeler la fonction class() sur chaque variable des données. Tandis que nous pourrions le faire manuellement (appeler la commande class sur chaque colonne, l'une après l'autre), il est bien plus rapide d'automatiser ce processus. Il nous faut donc obtenir les colonnes, l'une après l'autre pour leur appliquer à chacune la fonction class()... cela ressemble fortement à une boucle!"

- Class: text
  Output: "la fonction lapply prend une liste en entrée, applique une fonction à chaque élément de la liste et retourne une liste de la même taille que la liste originale. Puisqu'un dataframe n'est rien d'autre qu'une liste de vecteurs (vous pouvez le voir en tapant as.list(flags)), nous pouvons simplement utiliser lapply() pour appliquer la fonction class() sur chaque colonne des données flags. Voyons cela !"

- Class: cmd_question
  Output: "Tapez cls_list = lapply(flags, class) pour appliquer la fonction class (le deuxième argument de l'appel), sur chaque élément de la variable flags (nos données fournies en premier argument), et stocker le résultat dans une variable appelée cls_list. Remarquez comme on a tout simplement indiqué le nom de la fonction à appliquer (ici, class) sans les parenthèses qui suivent traditionnellement l'appel à une fonction. c'est le même mécanisme que celui présenté pour le passage de fonction en argument de fonction."
  CorrectAnswer: cls_list = lapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_list = lapply(flags, class)')
  Hint: "Tapez cls_list = lapply(flags, class) pour appliquer la fonction class() à chaque colonne de nos données et  stocker le résultat dans une variable appelée cls_list."

- Class: cmd_question
  Output: Tapez cls_list pour voir le résultat.
  CorrectAnswer: cls_list
  AnswerTests: omnitest(correctExpr='cls_list')
  Hint: Tapez simplement 'cls_list' pour voir le résultat.

- Class: cmd_question
  Output: "Le 'l' de 'lapply' vient donc des listes que la fonction retourne. Tapez class(cls_list) pour vérifier que la fonction lapply() retourne bel et bien une liste."
  CorrectAnswer: class(cls_list)
  AnswerTests: omnitest(correctExpr='class(cls_list)')
  Hint: "Tapez class(cls_list) pour confirmer que la fonction retourne bien une liste."

- Class: text
  Output: "Comme attendu, on obtient une liste de taille 30 -- un élément pour chaque variable (nos colonnes). Cependant, la sortie de notre fonction serait largement plus compacte si nous pouvions représenter la réponse sous la forme d'un vecteur au lieu d'une liste."

- Class: cmd_question
  Output: "Vous vous rappelez peut-être que dans un précédent cours, nous avions expliqué que les listes étaient pratiques pour stocker des données de types/classes différent-e-s. Dans notre cas, puisque chaque élément de la liste retournée par la fonction lapply est un vecteur de taille 1 contenant une chaîne de caractères, la variable cls_list peut être simplifiée en un simple vecteur de chaine de caractères. Pour faire cela, on peut effectuer une simple conversion avec la commande as.character(cls_list)."
  CorrectAnswer: as.character(cls_list)
  AnswerTests: omnitest(correctExpr='as.character(cls_list)')
  Hint: Tapez as.character(cls_list) pour convertir  cls_list en un vecteur de chaines de caractères.

- Class: cmd_question
  Output: "La fonction sapply permet d'automatiser cette procédure (elle appelle lapply en interne) puis en essayant de simplifier le résultat avant de nous le retourner. D'où le 's' de 'sapply' (pour 'simplify'). Utilisez sapply() de la même façon que lapply pour obtenir la classe de chaque colonne des données flags et stockez le résultat dans une variable appelée cls_vect. Si vous avez besoin d'aide, n'hésitez pas à utiliser ?sapply pour en afficher la documentation."
  CorrectAnswer: cls_vect = sapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_vect = sapply(flags, class)')
  Hint: "Bloqué-e? Tapez cls_vect = sapply(flags, class) pour stocker les classes de colonnes dans un vecteur de chaine de caractères appelé cls_vect."

- Class: cmd_question
  Output: "Utilisez class(cls_vect) pour confirmer que sapply() simplifie le résultat sous la forme d'un vecteur de chaine de caractères."
  CorrectAnswer: class(cls_vect)
  AnswerTests: omnitest(correctExpr='class(cls_vect)')
  Hint: "Tapez class(cls_vect) pour confirmer que sapply() simplifie le résultat sous la forme d'un vecteur de chaine de caractères."

- Class: text
  Output: "En général, si le résultat est une list où chaque élément est de taille 1, alors sapply() retournera un vecteur. Si le résultat est une liste où chaque élément est un vecteur de même taille (et supérieur à 1), alors sapply() retournera une matrice. Si sapply() ne peut pas identifier de correspondance ou de schéma simple dans la réponse à retourner, alors elle retournera la même réponse que ce que retournerai lapply()."

- Class: text
  Output: "Amusons-nous à utiliser lapply() et sapply() un peu plus."

- Class: text
  Output: "Les colonnes 11 à 17 de nos données sont des variables indicatrices. chacune représentent une couleur. La valeur dans la colonne sera donc à 1 si le drapeau contient cette couleur et à 0 sinon."

- Class: cmd_question
  Output:  "Ainsi, si on veut savoir le nombre total de pays (de notre jeu de données) qui ont, par exemple, la couleur orange sur leurs drapeaux, on peut tout simplement additionner les 1 et 0 de la colonne 'orange'. Essayez de calculer cette somme par la commande sum(flags$orange)."
  CorrectAnswer: sum(flags$orange)
  AnswerTests: omnitest(correctExpr='sum(flags$orange)')
  Hint: "Utilisez la commande sum(flags$orange) pour additionner tout les 1 et 0 de la colonne 'orange'."

- Class: text
  Output: "Maintenant, nous voulons répeter cette opération pour chaque couleur enregistrée dans notre jeu de données."

- Class: cmd_question
  Output: "Tout d'abord, utilisez la commande flag_colors = flags[, 11:17] pour extraire les colonnes contenant les variables indicatrices de couleurs et les stocker dans une novuelle variable appelée flag_colors. Remarquez la virgule avant 11:17, Cette commande permet d'indiquer que l'on veut extraire toutes les lignes (le premier élément --vide-- avant la virgule) mais seulement les colonnes 11 à 17."
  CorrectAnswer: flag_colors = flags[, 11:17]
  AnswerTests: omnitest(correctExpr='flag_colors = flags[, 11:17]')
  Hint: "flag_colors = flags[, 11:17] fait très bien le travail !"

- Class: cmd_question
  Output: "Utilisez la fonction head() pour jeter un oeil aux premières lignes de la variable flag_colors."
  CorrectAnswer: head(flag_colors)
  AnswerTests: omnitest(correctExpr='head(flag_colors)')
  Hint: "head(flag_colors) affiche les premières lignes désirées."

- Class: cmd_question
  Output: "Pour obtenir une liste contenant les sommes de chaque colonnes de flag_colors, utilisez la fonction lapply() avec deux arguments. Le premier est l'objet que l'on souhaite parcourir, le second, le nom de la fonction que l'on veut appliquer sur les éléments obtenus du premier argument. Rappelez-vous que l'on indique que le nom de la fonction, sans les parenthèses."
  CorrectAnswer: lapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='lapply(flag_colors, sum)')
  Hint: "Bloqué? la commande lapply(flag_colors, sum) vous retournera la somme de chaque colonne."

- Class: text
  Output: "Cela nous indique que sur le s 194 drapeaux de notre jeu de données, 153 contiennent la couleur rouge, 91 du vert, 33 du bleu, etc"

- Class: cmd_question
  Output: "Comme nous avons utilisé la fonction lapply, le résultat obtenu est sous forme de liste. Chaque élément de cette liste est de taille 1, donc le résultat peut être simplifié en utilisant sapply() au lieu de lapply(). A vous!"
  CorrectAnswer: sapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, sum)')
  Hint: "Utilisez la fonction sapply(flag_colors, sum) pour n'obtenir qu'un simple vecteur avec les sommes de chaque colonne."

- Class: text
  Output: "Il est peutêtre plus informatif d'identifier la proportion de drapeaux, sur les 194, contenant chacune des couleurs répertoriées. Puisque chaque colonne contient des 0 et des 1, la moyenne arithmétique de chaque colonne nous donnera la proportion de 1 correspondante."

- Class: cmd_question
  Output: "Utilisez sapply() pour appliquer la fonction mean() sur chaque colonne de flag_colors. Rappelez-vous que le deuxième argument spécifie le nom de la fonction (à indiquer sans les parenthèses) à utiliser."
  CorrectAnswer: sapply(flag_colors, mean)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, mean)')
  Hint: sapply(flag_colors, mean) devrait faire le travail!

- Class: text
  Output: "Dans l'exemple utilisé jusqu'à présent, sapply() a été capable de simplifier le résultat en un vecteur. Cela a été possible parce que chaque élément de la liste retournée par la fonction lapply() était un vecteur de taille 1. Rappelez-vous que sapply() retournera une matrice lorsque chaque élément de la liste retournée par lapply() est une vecteur de taille identique et supérieur à 1 pour tout les éléments de la liste."

- Class: cmd_question
  Output: "Pour illustrer cela, procédons à une extraction des colonnes 19 à 23 du jeu de données flags et stockons le résultat dans une nouvelle variable appelée flag_shapes. La commande 'flag_shapes = flags[, 19:23]' fera très bien le travail. A vous!"
  CorrectAnswer: flag_shapes = flags[, 19:23]
  AnswerTests: omnitest(correctExpr='flag_shapes = flags[, 19:23]')
  Hint: "flag_shapes = flags[, 19:23] permettra d'obtenir les colonnes 19 à 23 dans une nouvelle variable."

- Class: text
  Output: "Chacune de ces colonnes (variables) représentent le nombre de fois qu'une forme ou dessin spécifique apparait sur le drapeau d'un pays. Nous nous intéresserons tout particulièrement aux nombres minimums et maximums qu'une forme ou dessin apparait."

- Class: cmd_question
  Output: "La fonction range() retourne le minimum et maximum de son premier argument, qui devrait donc être un vecteur numérique (difficile de calculer un min/max sur des valeurs non numérique, me direz-vous... et j'aurais bien du mal à vous contredire !). Utilisez lapply() pour appliquer la fonction range à chaque colonne des données flag_shapes. Ne vous embétez pas à stocker le résultat, nous ne le réutiliserons pas."
  CorrectAnswer: lapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='lapply(flag_shapes, range)')
  Hint: "Essayez lapply(flag_shapes, range) pour appliquer la fonction range() sur chaque colonnes de flag_shapes."

- Class: cmd_question
  Output: "Faites la même opération, mais en utilisant cette fois-ci sapply() et stockez le résultat dans une variable appelée shape_mat."
  CorrectAnswer: shape_mat = sapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='shape_mat = sapply(flag_shapes, range)')
  Hint: "shape_mat = sapply(flag_shapes, range) fera très bien l'affaire pour appliquer la fonction range() à chaque colonne et récupérer non pas une liste mais une matrice que l'on stocke dans la variable shape_mat."

- Class: cmd_question
  Output: "Affichez le contenu de la variable shape_mat"
  CorrectAnswer: shape_mat
  AnswerTests: any_of_exprs('shape_mat', 'print(shape_mat)')
  Hint: "Tapez shape_mat pour en voir le contenu"

- Class: text
  Output: "Chaque colonne de shape_mat fournit le minimum et maximum du nombre de fois ou la forme considérée apparait dans les différents drapeaux répertoriés."

- Class: cmd_question
  Output: "Utilisez la fonction class() pour vérifier que shape_mat est bien dans une classe matrice."
  CorrectAnswer: class(shape_mat)
  AnswerTests: omnitest(correctExpr='class(shape_mat)')
  Hint: "class(shape_mat) vous dira le type/la classe de la variable shape_mat."

- Class: text
  Output: "Comme nous avons pu le voir, sapply() essaie autnat que possible de simplifier le résultat fournit par la fonction lapply(). Cela a fonctionné avec succès pour chacun des exemples présentés jusqu'à présent. Penchons nous un peu sur un exemple ou sapply() n'identifie pas de façon de simplifier le résultat et retournera donc la même liste que celle obtenue par lapply()."

- Class: cmd_question
  Output: "Lorsqu'on lui fournit un vecteur, la fonction unique() retournera un vecteur dont on aura retiré les duplicats (on obtient donc un vecteur des valeurs présentent dans le vecteur d'entrée, sans répétitions). Pour voir le fonctionnement, essayez la commande suivante: unique(c(3, 4, 5, 5, 5, 6, 6))."
  CorrectAnswer: unique(c(3, 4, 5, 5, 5, 6, 6))
  AnswerTests: omnitest(correctExpr='unique(c(3, 4, 5, 5, 5, 6, 6))')
  Hint: "Tapez la commande unique(c(3, 4, 5, 5, 5, 6, 6)) pour voir la fonciton unique() en action."

- Class: cmd_question
  Output: "On cherche à connaitre les valeurs uniques de chaque variable du jeu de données flags. Pour faire cela, utilisez la fonction lapply() pour appliquer la fonction unique() sur chaque colonne des données flags et stockez le résultat dans une variable appelée unique_vals."
  CorrectAnswer: unique_vals = lapply(flags, unique)
  AnswerTests: omnitest(correctExpr='unique_vals = lapply(flags, unique)')
  Hint: "Tapez simplement unique_vals = lapply(flags, unique)."

- Class: cmd_question
  Output: "Affichez la variable unique_vals"
  CorrectAnswer: unique_vals
  AnswerTests: any_of_exprs('unique_vals', 'print(unique_vals)')
  Hint: "Tapez unique_vals pour en voir le contenu."

- Class: cmd_question
  Output: "Puisque la variable unique_vals est une liste, vous devriez retrouver facilement la taille de chaque éléments de unique_vals (i.e. le nombre de valeurs distinctes présentent dans chaque variable). Simplifiez le résultat si possible."
  CorrectAnswer: sapply(unique_vals, length)
  AnswerTests: omnitest(correctExpr='sapply(unique_vals, length)')
  Hint: "Appliquez la fonction length() sur chaque éléments de unique_vals en utilisant sapply(). Rappelez-vous, pas de parenthèses après le nom de la fonction indiquée en argument de sapply."

- Class: text
  Output: "Le fait que chaque éléments de unique_vals soit tous des vecteurs de tailles 'différentes' (il peut y avoir des vecteurs de même taille) pose un problème à la fonction sapply() puisqu'il n'y a pas de façon évidente de simplifier ce type de résultat."

- Class: cmd_question
  Output: "Utilisez la fonction sapply() pour appliquer la fonction unique() sur chaque colonne des données flags pour voir que vous obtenez le même résultat non simplifié que celui obtenu avec la fonction lapply()."
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: "Utilisez sapply(flags, unique) pour appliquer la fonction unique sur chaque colonne des données flags et observer qu'elle échoue à simplifier le résultat."

- Class: text
  Output: "Occasionnellement, vous pourriez avoir besoin d'appliquer une fonction qui n'est pas encore définie, nécessitant ainsi d'écrire la vôtre. Ecrire des fonctions en R à déjà fait l'objet d'un cours précédent mais prenons le temps de nous pencher sur les cas des fonctions de boucles."

- Class: text
  Output: "Imaginons que nous nous intéressions aux seconds éléments de chaque éléments de unique_vals créé un peu plus haut. Puisque chaque élément de unique_vals est un vecteur et que nous n'avons pas connaissance d'une fonction de base de R permettant de retourner uniquement le deuxième élément d'un vecteur, nous allons créer notre propre fonction pour l'obtenir. Vous vous rappelez des fonctions anonymes? c'est le moment!"

- Class: cmd_question
  Output: "lapply(unique_vals, function(elem) elem[2]) retournera une liste contenant les seconds éléments de chaque liste contenue dans la variable unique_vals. Remarquez que notre fonction ne prend qu'un argument, elem, qui est juste une 'dummy variable' (variable idiote?) qui permettra d'obtenir à tour de rôle chaque éléments de unique_vals."
  CorrectAnswer: lapply(unique_vals, function(elem) elem[2])
  AnswerTests: calculates_same_value('lapply(unique_vals, function(elem) elem[2])')
  Hint: "Utilisez la fonction lapply(unique_vals, function(elem) elem[2]) pour retourner une liste contenant les seconds éléments de chaque liste contenue dans unique_vals."

- Class: text
  Output: "La seule différence entre nos exemples précédents et cekui-ci est que celui-ci utilise une fonction que nous avons définie directement dans l'appel à lapply(). Notre fonction n'a donc pas de nom (fonction anonyme) et disparaitra dès lors que lapply() aura fini son traitement."

- Class: text
  Output: "Dans ce cours, vous avez appris à utiliser les fonctions lapply() et sapply() pour appliquer une opération sur chaque éléments d'une liste. Dans le prochain cours, nous allons nous pencher sur le cas des fonctions voisines de lapply() et sapply()."

- Class: text
  Output: Félicitations, vous avez terminé ce module! Pas de test sur Moodle cette fois-ci, ces notions feront partie d'un test plus complet sur la *apply family, avec le module suivant portant sur vapply et sapply."
